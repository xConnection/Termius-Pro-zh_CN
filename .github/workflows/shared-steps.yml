name: Shared Workflow Steps

on:
  workflow_call:
    inputs:
      run_on:
        description: 'The running platform (ubuntu, macos, windows)'
        required: true
        type: string
      platform:
        description: 'The target platform (linux, macos, windows)'
        required: true
        type: string
      version_command:
        description: 'The command to extract the version from the downloaded package'
        required: true
        type: string
      install_command:
        description: 'The command to install the Termius package'
        required: true
        type: string
      source_path:
        description: 'The source path of the app.asar file'
        required: true
        type: string

jobs:
  template:
    runs-on: ${{ inputs.run_on }}
    timeout-minutes: 15

    steps:
      - name: Checkout source code from repository
        uses: actions/checkout@v4

      - name: Configure Python runtime environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Extract Termius package version
        id: extract_version
        run: |
          echo "Extracting version from Termius package..."

          ${{ inputs.version_command }}

          echo "Extracted Termius version: $termius_version"

      - name: Validate extracted version
        id: validate_version
        shell: bash
        run: |
          set -e
          echo "Validating extracted version..."
          if [ -z "$TERMIUS_VERSION" ]; then
            echo "::error::Version validation failed - no version extracted"
            exit 1
          fi
          echo "Version validation successful"
          echo "Extracted Termius version: $TERMIUS_VERSION"

      - name: Fetch latest GitHub release version
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "Getting latest Termius version from GitHub Releases..."

          response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          echo "API URL: https://api.github.com/repos/${{ github.repository }}/releases/latest"
          echo "API response: $response"

          github_version=$(echo "$response" | jq -r '.tag_name // "0.0.0"')
          github_version=$(echo "$github_version" | sed 's/v//')
          echo "GitHub latest version: $github_version"
          echo "GITHUB_VERSION=$github_version" >> $GITHUB_ENV

      - name: Compare version metadata
        id: compare_versions
        shell: bash
        run: |
          set -e
          echo "Comparing versions..."

          if [ "$(printf '%s\n' "$TERMIUS_VERSION" "$GITHUB_VERSION" | sort -V | tail -n1)" == "$TERMIUS_VERSION" ] && [ "$TERMIUS_VERSION" != "$GITHUB_VERSION" ]; then
            echo "::notice::Termius package version ($TERMIUS_VERSION) is higher than GitHub Release version ($GITHUB_VERSION). Continuing workflow."
            echo "should_continue=true" >> $GITHUB_OUTPUT
          else
            echo "::notice::Termius package version ($TERMIUS_VERSION) is lower than or equal to GitHub Release version ($GITHUB_VERSION). Exiting workflow."
            echo "should_continue=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Termius application package
        if: steps.compare_versions.outputs.should_continue == 'true'
        run: |
          echo "Installing Termius v$TERMIUS_VERSION package..."
          ${{ inputs.install_command }}
          echo "Termius package installed successfully"

      - name: Install asar packaging tool
        if: steps.compare_versions.outputs.should_continue == 'true'
        shell: bash
        run: |
          set -e
          echo "Installing asar..."
          npm install -g asar || { echo "::error::Failed to install asar"; exit 1; }

      - name: Generate localization assets
        if: steps.compare_versions.outputs.should_continue == 'true'
        shell: bash
        run: |
          set -e
          echo "Generating assets..."

          temp_dir=$(mktemp -d -p ./)
          echo "Temporary directory: $temp_dir"

          # 定义平台前缀获取函数
          get_platform_prefix() {
            case "$1" in
              "macos")   echo "app-macos" ;;
              "windows") echo "app-windows" ;;
              "ubuntu")  echo "app-linux" ;;
              *)
                echo "::error::Unsupported platform: $1"
                exit 1
                ;;
            esac
          }

          # 定义功能后缀生成函数
          get_feature_suffix() {
            local char=$1
            case "$char" in
              "l") echo "localize" ;;
              "k") echo "skip" ;;
              "t") echo "trial" ;;
              *)
                echo "::warning::Ignoring unknown argument: $char"
                echo ""
                ;;
            esac
          }

          # 获取平台前缀
          file_prefix=$(get_platform_prefix "${{ inputs.platform }}")

          # 处理发布列表
          RELEASE_LIST=${{ vars.RELEASE_LIST || 'l,lk,lt' }}
          echo "RELEASE_LIST: $RELEASE_LIST"
          IFS=',' read -r -a release_list <<< "$RELEASE_LIST"

          for release in "${release_list[@]}"; do
            args=""
            features=()

            # 处理每个字符参数
            for char in $(echo "$release" | grep -o .); do
              feature=$(get_feature_suffix "$char")
              if [[ -n "$feature" ]]; then
                args+="$char"
                features+=("$feature")
              fi
            done

            # 生成文件名
            if [[ ${#features[@]} -gt 0 ]]; then
              suffix="-$(IFS=-; echo "${features[*]}")"
            else
              suffix=""
            fi
            file_name="${file_prefix}${suffix}.asar"

            # 生成资源文件
            echo "Generating $file_name with args: -$args"
            python lang.py --trial --skip-login || { echo "::error::Failed to generate $file_name"; exit 1; }

            # 复制文件到临时目录
            dest_path="$temp_dir/$file_name"
            cp "${{ inputs.source_path }}" "$dest_path" || {
              echo "::error::Failed to copy $file_name"
              echo "Source: ${{ inputs.source_path }}"
              echo "Destination: $dest_path"
              exit 1
            }
            echo "Copied $file_name to temporary directory: $dest_path"
          done

          ls -la "$temp_dir"
          echo "TEMP_DIR=$temp_dir" >> $GITHUB_ENV    

      - name: Prepare release notes content
        if: steps.compare_versions.outputs.should_continue == 'true'
        id: prepare_release_notes
        shell: bash
        run: |
          set -e
          echo "Updating Release Notes..."

          release_notes=$(cat ./RELEASE_NOTES.md)
          release_version="v$TERMIUS_VERSION"

          updated_release_notes=$(echo "$release_notes" | sed "s/{{VERSION}}/$release_version/g")

          echo "updated_release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$updated_release_notes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Publish release with generated assets
        if: steps.compare_versions.outputs.should_continue == 'true'
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: v${{ env.TERMIUS_VERSION }}
          body: ${{ steps.prepare_release_notes.outputs.updated_release_notes }}
          draft: true
          prerelease: false
          artifacts: ${{ env.TEMP_DIR }}/*.asar
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup temporary resources
        if: always()
        shell: bash
        run: |
          if [ -d "$TEMP_DIR" ]; then
            echo "Cleaning up temporary directory: $TEMP_DIR"
            rm -rf "$TEMP_DIR"
          fi
